version: '3.8'

services:
  ## FOR LOCAL DEVELOPMENT
  # nbiot_api_service_local:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: nbiot_api_container
  #   ports:
  #     - "8000:8000" 
  #   restart: unless-stopped

  nbiot_api_service:
    image: minhtuan172/nbiot-detector-app 
    container_name: nbiot_api_container 
    ports:
      - "8000:8000"
    environment:
      - OTEL_SERVICE_NAME=nbiot-detector-api
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://jeager:4318/v1/traces
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://jeager:4318/v1/logs
    restart: unless-stopped

  jenkins:
    image: minhtuan172/custom-jenkins
    container_name: jenkins
    restart: unless-stopped
    privileged: true
    user: root
    ports:
      - 8081:8080
      - 50000:50000
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock

  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100

  prometheus:
    image: prom/prometheus:v2.38.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - prometheus_data:/prometheus
      - ./local/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./local/prometheus/config/alert-rules.yml:/etc/prometheus/alert-rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=20h'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: alertmanager
    restart: unless-stopped
    volumes:
      - alertmanager_data:/alertmanager/data
      - ./local/alertmanager:/alertmanager
    command:
      - '--config.file=/alertmanager/config.yml'
      - '--storage.path=/alertmanager/data'
      - '--log.level=debug'
    ports:
      - 9093:9093

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    ports:
      - 8090:8080

  grafana:
    image: grafana/grafana:12.0.0
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./local/grafana/config/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./local/grafana/config/datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./local/grafana/dashboards:/opt/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health && echo 'ready'"]
      interval: 10s
      retries: 10         

  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"
      - "4318:4318"
      - "16686:16686"


  setup:
    build:
      context: local/elk/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: local/elk/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./local/elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node

  kibana:
    build:
      context: local/elk/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - .local/elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch


volumes:
  setup:
  elasticsearch:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  jenkins_home:
